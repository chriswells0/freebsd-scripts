#!/bin/sh

:<<DOCUMENTATION

	Description:	Updates the local ports tree from the current quarterly Git branch.
	Author:			Chris Wells (https://chriswells.io)

DOCUMENTATION


REPO_URL="https://git.freebsd.org/ports.git"

# Require root in order to write to the ports dir. -- cwells
if [ "$(id -u)" != "0" ]; then
	echo 'This script must be run as root or using sudo.' 1>&2
	exit 1
fi

if ! which git > /dev/null; then
	pkg install git
fi

# If a parameter was passed, use it as the destination directory.  For example,
# to update the ezjail ports tree: portsfetch /usr/jails/basejail/usr/ports
if [ -n "$1" ]; then
	DESTDIR="$1"
else
	DESTDIR=/usr/ports
fi

if [ ! -d "${DESTDIR}" ]; then
	mkdir "${DESTDIR}"
fi

# Clear the contents of the destination directory if it's not being managed by Git. -- cwells
if [ ! -z "$(ls -qAL -- "${DESTDIR}")" ] && [ ! -d "${DESTDIR}/.git" ]; then
	echo 'Destination directory contains files but is not a Git repo.'
	echo 'You must delete the existing files to switch to a quarterly branch.'
	# shellcheck disable=SC2039
	read -r -p "Do you want to delete the contents of \"${DESTDIR}\"? [y/N]: " DELETE_FILES
	echo ''
	case $DELETE_FILES in
		[Yy]* ) find "${DESTDIR}" -mindepth 1 -delete ;; # Delete all files in the dir. -- cwells
		* )
			if [ -d "${DESTDIR}/.svn" ]; then
				echo 'The destination directory is an SVN repo, so no update was performed.'
				echo 'Your ports tree is still out of date. You should switch to Git.'
			elif [ -f "${DESTDIR}/.portsnap.INDEX" ]; then
				portsnap fetch update # Use portsnap to update from HEAD. -- cwells
				echo ''
				echo 'The destination directory is managed by portsnap, so an update was performed.'
				echo 'This means you are still using the latest branch instead of quarterly.'
			fi
			echo 'Run portsfetch again and choose to delete your files to switch.'
			exit 0 ;;
	esac
	echo ''
fi

if [ ! -d "${DESTDIR}/.git" ]; then # Initial clone of the repo. -- cwells
	git clone "${REPO_URL}" "${DESTDIR}"
else # Update the existing repo. -- cwells
	git -C "${DESTDIR}" pull --ff-only
fi

BRANCH=$(git -C "${DESTDIR}" branch --list -r | grep -E '^\s*origin/20[0-9]{2}Q[1-4]$' | sort | tail -1 | sed 's/ *origin\///')
if [ "${#BRANCH}" != "6" ]; then
	echo 'Failed to determine the correct branch to use.'
	exit 1
fi

if [ "$(git -C "${DESTDIR}" branch --show-current)" != "${BRANCH}" ]; then
	git -C "${DESTDIR}" checkout "${BRANCH}"
fi

exit 0
