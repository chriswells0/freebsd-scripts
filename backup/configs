#!/bin/sh

:<<DOCUMENTATION

	Description:	Backs up common config files that may have been modified on the system.
	Parameters:
		-d destination (optional): directory to save the backup to
			Default: /var/backups/configs
		-f file_name (optional): name to use for the backup file
			Default: hostname-yyyy-mm-ddThh:mm:ss.tar.gz
		-j jail_root (optional): path where jails are located
			Default: /usr/jails
		-s subdirectory (optional): subdirectory to use for the backup
			Default: no value
			Useful for naming a backup snapshot while using the default destination and name.
		-t type (optional): type of system being backed up (e.g., desktop, server, or any value)
			Default: no value
			Useful for backing up a default set of files based on the system type.
		-x (optional): exclude the default set of files defined in this script
			Use with files in configs-custom to have full control over the backup list.
	Author:			Chris Wells (https://chriswells.io)

DOCUMENTATION


# shellcheck source=/dev/null
. "$(dirname "$(readlink -f "$0")")/../lib/shell.common"


# Require root to be sure all files are accessible. -- cwells
requireRootOrExit

parseScriptOptions "$@"

BACKUP_DIR=$(getOption '-d')
if [ -z "$BACKUP_DIR" ]; then
	BACKUP_DIR=/var/backups/configs
fi

BACKUP_FILE=$(getOption '-f')
if [ -z "$BACKUP_FILE" ]; then
	BACKUP_FILE="$(hostname)-$(date +%Y-%m-%dT%H:%M:%S).tar.gz"
fi

JAIL_ROOT=$(getOption '-j')
if [ -z "$JAIL_ROOT" ]; then
	JAIL_ROOT=/usr/jails
fi

if optionIsEnabled '-x'; then
	CONFIGS=''
else
	# Any paths in this list that don't exist on the current system will be omitted. -- cwells
	CONFIGS="/boot/*.eli
/boot/device.hints
/boot/encryption.key
/boot/loader.conf
/etc/
/root/.cshrc
/root/.login
/root/.profile
/usr/home/*/.bashrc
/usr/home/*/.cshrc
/usr/home/*/.inputrc
/usr/home/*/.login
/usr/home/*/.profile
/usr/local/etc/
$JAIL_ROOT/*/etc/
$JAIL_ROOT/*/usr/local/etc/
$JAIL_ROOT/*/var/db/dkim/
$(getScriptPath)/configs-custom/*.txt"
fi

# Back up files for this type of system. -- cwells
TYPE=$(getOption '-t')
if [ -n "$TYPE" ] && [ -s "$(getScriptPath)/configs-custom/type-$TYPE.txt" ]; then
	CONFIGS="$CONFIGS
$(cat "$(getScriptPath)/configs-custom/type-$TYPE.txt")"
fi

# Include custom files that are common to all hosts. -- cwells
if [ -s "$(getScriptPath)/configs-custom/host-all.txt" ]; then
	CONFIGS="$CONFIGS
$(cat "$(getScriptPath)/configs-custom/host-all.txt")"
fi

# Back up files that are specific to this host. -- cwells
HOST=$(hostname)
if [ -n "$HOST" ] && [ -s "$(getScriptPath)/configs-custom/host-$HOST.txt" ]; then
	CONFIGS="$CONFIGS
$(cat "$(getScriptPath)/configs-custom/host-$HOST.txt")"
fi

# Create backup directory if it does not exist. -- cwells
if [ ! -d "$BACKUP_DIR" ]; then
	# shellcheck disable=SC2174
	mkdir -m 750 -p "$BACKUP_DIR"
fi

# If a subdirectory was provided, append it to the backup directory. -- cwells
SUBDIRECTORY=$(getOption '-s')
if [ -n "$SUBDIRECTORY" ]; then
	BACKUP_DIR="$BACKUP_DIR/$SUBDIRECTORY"
	if [ ! -d "$BACKUP_DIR" ]; then
		# shellcheck disable=SC2174
		mkdir -m 750 -p "$BACKUP_DIR"
	fi
fi


# Expand wildcards and remove invalid (non-existent) paths from the list. -- cwells
VALID_CONFIGS=''
OLD_IFS=$IFS
IFS=$'\n'
for CONFIG_PATH in $CONFIGS; do
	if [ -e "$CONFIG_PATH" ]; then
		VALID_CONFIGS="$VALID_CONFIGS$CONFIG_PATH
"
	fi
done
IFS=$OLD_IFS


echo '
Backing up config files...'

# shellcheck disable=SC2039
echo -n "$VALID_CONFIGS" | tar -czf "$BACKUP_DIR/$BACKUP_FILE" -T -

if [ -e "$BACKUP_DIR/$BACKUP_FILE" ] && [ -s "$BACKUP_DIR/$BACKUP_FILE" ]; then
	chmod 640 "$BACKUP_DIR/$BACKUP_FILE"
	echo "Saved configs to: $BACKUP_DIR/$BACKUP_FILE"
else
	echo 'Error creating backup!'
fi


exit 0
